{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/AppFeedback/App.styled.jsx","components/AppFeedback/AppFeedback.js","index.js"],"names":["Title","styled","h1","MySection","section","Section","children","title","Wrapper","div","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","id","onClick","Provider","value","color","className","toUpperCase","slice","Wrap","PositivePercentage","Line","Statistics","good","neutral","bad","total","positivePercentage","status","strokeColor","percent","NotificationTitel","h2","Notification","message","AppWrap","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prev","Math","round","Number","isNaN","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caab8527.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  font-size: 32px;\n  margin-bottom: 40px;\n`;\n\nexport const MySection = styled.section`\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { Title, MySection } from './Section.styled';\n\nexport default function Section({ children, title }) {\n  return (\n    <MySection>\n      <Title>{title}</Title>\n      {children}\n    </MySection>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  cildren: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 50px;\n  /* padding-left: 30px; */\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  width: 120px;\n  align-items: center;\n  padding: 8px 10px;\n  border: 1px solid #c9c1c1;\n  border-radius: 14px;\n  font-style: italic;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 20px;\n  letter-spacing: 0.03em;\n  text-align: center;\n  color: #5c6061;\n  background-color: #fff;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n\n  &:not(:last-child) {\n    margin-right: 15px;\n  }\n  &:hover {\n    background-color: #15e7ee29;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Wrapper, Button } from './FeedbackOptions.styled';\n\nimport { ImHappy, ImSad, ImNeutral } from 'react-icons/im';\nimport { IconContext } from 'react-icons';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <Wrapper>\n      {options.map(option => {\n        switch (option) {\n          case 'good':\n            return (\n              <Button\n                key={option}\n                type=\"button\"\n                id={option}\n                onClick={onLeaveFeedback}\n              >\n                <IconContext.Provider\n                  value={{\n                    color: '#178036',\n                    className: 'react-icons',\n                  }}\n                >\n                  <ImHappy id={option} />\n                </IconContext.Provider>\n                {option[0].toUpperCase() + option.slice(1)}\n              </Button>\n            );\n\n          case 'neutral':\n            return (\n              <Button\n                key={option}\n                type=\"button\"\n                id={option}\n                onClick={onLeaveFeedback}\n              >\n                <IconContext.Provider\n                  value={{\n                    color: '#dfd10d',\n                    className: 'react-icons',\n                  }}\n                >\n                  <ImNeutral id={option} />\n                </IconContext.Provider>\n                {option[0].toUpperCase() + option.slice(1)}\n              </Button>\n            );\n\n          case 'bad':\n            return (\n              <Button\n                key={option}\n                type=\"button\"\n                id={option}\n                onClick={onLeaveFeedback}\n              >\n                <IconContext.Provider\n                  value={{\n                    color: '#df0d0d',\n                    className: 'react-icons',\n                  }}\n                >\n                  <ImSad id={option} />\n                </IconContext.Provider>\n                {option[0].toUpperCase() + option.slice(1)}\n              </Button>\n            );\n\n          default:\n            return null;\n        }\n      })}\n    </Wrapper>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding-left: 40px;\n\n  & p {\n    display: flex;\n    justify-content: space-between;\n    width: 72%;\n    font-style: italic;\n    font-weight: 500;\n    font-size: 24px;\n    line-height: 22px;\n    letter-spacing: 0.03em;\n    color: #5c6061;\n  }\n  & p:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const PositivePercentage = styled.div`\n  margin-top: 30px;\n  font-style: bold;\n  font-weight: 500;\n  font-size: 30px;\n  letter-spacing: 0.03em;\n\n  & span {\n    margin-right: 20px;\n  }\n`;\n\nexport const Line = styled.div`\n  width: 80%;\n  height: 1px;\n  margin-bottom: 20px;\n  border: 1px solid #5c6061;\n`;\n","import PropTypes from 'prop-types';\nimport { Wrap, PositivePercentage, Line } from './Statistics.styled';\n\nimport { Progress } from 'antd';\nimport 'antd/dist/antd.css';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  return (\n    <Wrap>\n      <p>\n        <span>Good:</span> <span>{good}</span>\n      </p>\n      <p>\n        <span>Neutral:</span> <span>{neutral}</span>\n      </p>\n      <p>\n        <span>Bad:</span> <span>{bad}</span>\n      </p>\n      <Line />\n      <p>\n        <span>Total:</span> <span>{total}</span>\n      </p>\n      <PositivePercentage>\n        <span>Positive feedback:</span>\n        <Progress\n          type=\"circle\"\n          status=\"normal\"\n          strokeColor={{\n            '0%': '#108ee9',\n            '100%': '#87d068',\n          }}\n          percent={positivePercentage}\n        />\n        {/* <ShowPercentage>{positivePercentage} %</ShowPercentage> */}\n      </PositivePercentage>\n    </Wrap>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const NotificationTitel = styled.h2`\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { NotificationTitel } from './Notification.styled';\n\nexport default function Notification({ message }) {\n  return <NotificationTitel>{message}</NotificationTitel>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const AppWrap = styled.div`\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  margin: 10px auto 0;\n  border: 1px solid #c9c1c1;\n  border-radius: 30px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n`;\n","import { useState } from 'react';\n\nimport Section from '../Section';\nimport FeedbackOptions from '../FeedbackOptions';\nimport Statistics from '../Statistics';\nimport Notification from '../Notification';\n\nimport { AppWrap } from './App.styled';\n\nimport React from 'react';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = ['good', 'neutral', 'bad'];\n\n  const onLeaveFeedback = e => {\n    const name = e.target.id;\n\n    switch (name) {\n      case 'good':\n        setGood(prev => prev + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prev => prev + 1);\n        break;\n\n      case 'bad':\n        setBad(prev => prev + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const positivePercentage = Math.round((good / countTotalFeedback()) * 100);\n\n    return Number.isNaN(positivePercentage) ? 0 : positivePercentage;\n    //   < 30\n    // ? `🙁 ${positivePercentage}`\n    // : positivePercentage < 60\n    // ? `😐 ${positivePercentage}`\n    // : positivePercentage < 80\n    // ? `🙂 ${positivePercentage}`\n    // : `😊 ${positivePercentage}`;\n  };\n\n  return (\n    <AppWrap>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n      {countTotalFeedback() ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\"></Notification>\n      )}\n    </AppWrap>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/AppFeedback';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}